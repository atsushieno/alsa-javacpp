plugins {
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-build'
    id 'maven-publish'
    id 'signing'
}

ext.targetArtifactName = "dev.atsushieno:alsa-javacpp"
ext.javacppVersion = '1.5.10'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

dependencies {
    api "org.bytedeco:javacpp:$javacppVersion"
    javacppPlatform "$targetArtifactName:$version:linux-x86_64"
    javacppPlatform "$targetArtifactName:$version:linux-arm64"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

test {
    useJUnitPlatform()
}

compileJava.dependsOn(tasks.named("javacppBuildParser"))
tasks.withType(org.gradle.api.tasks.WriteProperties).forEach {
    it.dependsOn(tasks.named("javacppBuildParser"))
}
// Gradle is quite buggy and it fails to report what should be described to depend on.
// It's buggy on 7.6 but we could ignore that on 7.x.
// Starting 8.x they treat their bugs as *our* errors, which is not acceptable, so we use 7.6.
// Gradle also neglects to react to our bug reports, so it is irrecoverable.
tasks.withType(org.gradle.api.publish.maven.tasks.GenerateMavenPom).forEach {
    it.dependsOn(tasks.named("javacppBuildParser"))
    it.dependsOn(tasks.named("javacppBuildCommand"))
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask).configureEach {
    includePath = ["/usr/include", "$buildDir/$javacppPlatform/include", project.projectDir.toString() + "/dummy_headers"]

    copyLibs false

    deleteJniFiles false
}

javacppBuildParser {
    // typically set here the classOrPackageNames to class names implementing InfoMap
    classOrPackageNames = ['alsa_javacpp_presets.Alsa', 'libc_presets.HackyPoll']
}
javacppBuildCompiler {
    copyLibs = true
    deleteJniFiles false
}

afterEvaluate {
    afterEvaluate {
        publishing {
            publications {
                maven(MavenPublication) {
                    pom {
                        name.set('alsa-javacpp')
                        description.set('(partial) ALSA JNI binding using JavaCPP')
                        url.set('https://github.com/atsushieno/alsa-javacpp')
                        scm { url.set('https://github.com/atsushieno/alsa-javacpp') }
                        licenses {
                            license {
                                name.set('the MIT License')
                                url.set('https://github.com/atsushieno/alsa-javacpp/blob/main/LICENSE')
                            }
                        }
                        developers {
                            developer {
                                id.set('atsushieno')
                                name.set('Atsushi Eno')
                                email.set('atsushieno@gmail.com')
                            }
                        }
                    }
                }

                maven(MavenPublication) {
                    groupId = group
                    artifactId = "alsa-javacpp"
                    from components.java
                }
            }
        }

        // keep it as is. It is replaced by CI release builds
        signing {}
    }
}
